{
  "compilerOptions": {
    // ECMAScript5와 호환되도록 트랜스파일링
    "target": "es5",

    // 프로젝트에서 사용하려는 라이브러리 설정 (ESNext는 최신 ES 기능을 포함)
    "lib": ["dom", "dom.iterable", "esnext"],

    // JavaScript 파일도 TypeScript와 함께 사용할 수 있도록 허용
    "allowJs": true,

    // 라이브러리의 타입 체크 건너뛰기 (성능 최적화)
    "skipLibCheck": true,

    // ES 모듈을 CommonJS 모듈로 변환할 때 호환성 향상
    "esModuleInterop": true,

    // default import 사용을 허용 (CommonJS와 호환성을 위해 필요)
    "allowSyntheticDefaultImports": true,

    // 엄격한 타입 검사 모드 활성화
    "strict": true,

    // 파일 이름의 대소문자 일관성을 강제하여 운영체제 간 호환성 보장
    "forceConsistentCasingInFileNames": true,

    // Switch 문에서 fallthrough 방지 (코드 오류 방지)
    "noFallthroughCasesInSwitch": true,

    // 모듈 타입 설정. 최신 ES 모듈 사양 사용
    "module": "esnext",

    // Node 방식으로 모듈을 해석하여 `node_modules`에서 가져오도록 설정
    "moduleResolution": "node",

    // JSON 파일을 모듈로 불러올 수 있도록 허용
    "resolveJsonModule": true,

    // 개별 모듈로 컴파일 (ESM 사용 시 필요)
    "isolatedModules": true,

    // TypeScript가 컴파일 결과물을 생성하지 않도록 설정 (Next.js 프로젝트에 적합)
    "noEmit": true,

    // JSX를 React용으로 설정 (React 17 이상을 사용하는 경우)
    "jsx": "react-jsx",


    // 성능 향상을 위한 추가 옵션
//    "incremental": true,               // 점진적 컴파일로 성능 최적화
//    "noUnusedLocals": true,            // 사용하지 않는 지역 변수에 경고
//    "noUnusedParameters": true,        // 사용하지 않는 매개변수에 경고
//    "noImplicitReturns": true,         // 함수에서 반환되지 않은 경우 경고
//    "noImplicitAny": true,             // 암시적으로 any로 처리되는 경우 경고
//    "strictNullChecks": true           // null 및 undefined 체크 강화
  },

  // 포함할 디렉터리 및 파일 지정 (src 폴더에 모든 소스가 있다고 가정)
  "include": ["src"],

  // 제외할 디렉터리 (node_modules는 항상 제외)
  "exclude": ["node_modules"],

  "extends": "./tsconfig.paths.json"
}